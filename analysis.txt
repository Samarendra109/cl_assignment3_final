% Student name: NAME
% Student number: NUMBER
% UTORid: ID

% This code is provided solely for the personal and private use of students
% taking the CSC485H/2501H course at the University of Toronto. Copying for
% purposes other than this use is expressly prohibited. All forms of
% distribution of this code, including but not limited to public repositories on
% GitHub, GitLab, Bitbucket, or any other online platform, whether as given or
% with any changes, are expressly prohibited.

% Authors: Jingcheng Niu and Gerald Penn

% All of the files in this directory and all subdirectories are:
% Copyright c 2022 University of Toronto

2(a)

Sentence 28: A hacker speaks every language.

exists(x).(hacker(x) ^ forall(y).(language(y) => speak(x,y)))
    i.e. there exists an x s.t. x is a hacker and for all y if y is a language then x speaks y.
forall(y).(language(y) => exists(x).(hacker(x) ^ speak(x,y)))
    i.e. for all y if y is a language then there exists an x s.t. x is a hacker and x speaks y. 

Sentence 30: yi ge    heike  huishuo mei zhong    yuyan.
             a  ge-CL hacker speak   all zhing-CL language.

exists(x).(hacker(x) ^ forall(y).(language(y) => speak(x,y)))
    i.e. there exists an x s.t. x is a hacker and for all y if y is a language then x speaks y.

2(e)

For sentence "A hacker speaks every language." my grammar generates the translation "yi ge heike huishuo mei zhong yuyan."
Google translate generates the translation "heike huishuo mei yi zhong yuyan".

Google translate gets the quantifier right, but missed out on the classifiers. But more or less the translation is similar to the one generated by my grammar.

For sentence "yi ge heike huishuo mei zhong yuyan." My grammar generates two translations. 
"a hacker speaks every language" and "every language a hacker speaks".
Google translate generates the translation "A hacker can speak every language."

Google translate translation matches closely to one of the translation.

In general, google trasnlate gives the same transation as the surface reading of the sentence. On that part, the output of the grammar closely matches with google translate.

One observation is, google translate is keeping the word order more or less the same most of the time. So it is never generating the topicalized sentence as a transation.

Similarly, if we translate "A language, every hacker speaks" Google translate (due to it's tendency of maintaining word order) gives only the topicalized translation "yi zhong yuyan, mei ge heike dou huishuo".
But the grammar is able to generate all the combinations for all the readings of the sentence i.e.
For reading,
    ∃x.(language(x) ^ ∀y.(hacker(y) => speak(y, x)))
        yi zhong yuyan mei ge heike dou huishuo
        mei ge heike dou huishuo yi zhong yuyan

And for reading
    ∀x.(hacker(x) => ∃y.(language(y) ^ speak(x, y)))
        mei ge heike dou huishuo yi zhong yuyan

Hence in conclusion, a grammar based translator can generate translation for all reading and all possible sentence structure, while an NMT system usually generates a translation that more or less maintains the word order.
But writing grammar rules for all possible combinations is very hard. Implementation wise NMT is much easier.
